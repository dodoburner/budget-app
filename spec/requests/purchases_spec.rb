require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/purchases', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Purchase. As you add validations to Purchase, be sure to
  # adjust the attributes here as well.
  before(:example) do
    @user = User.create!(email: 'mail@gmail.com', name: 'pendo', password: '111111', password_confirmation:'111111')
    file = fixture_file_upload(Rails.root.join('public', 'apple-touch-icon.png'), 'image/png')
    @group = Group.create!(name: 'food', user: User.first, icon: file)
    sign_in @user
  end

  let(:valid_attributes) do
    { name: 'apple', amount: 50, author: @user, groups: [@group] }
  end

  let(:post_attributes) do
    { name: 'apple', amount: 50, author: @user, groups: [@group.id] }
  end

  let(:invalid_attributes) do
    { name: 'orange', amount: 50 }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Purchase.create! valid_attributes
      get group_purchases_url(@group)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_group_purchase_url(@group)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Purchase' do
        expect do
          post group_purchases_url(@group), params: { purchase: post_attributes }
        end.to change(Purchase, :count).by(1)
      end

      it 'redirects to the created purchase' do
        post group_purchases_url(@group), params: { purchase: post_attributes }
        expect(response).to redirect_to(group_purchases_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Purchase' do
        expect do
          post group_purchases_url(@group), params: { purchase: invalid_attributes }
        end.to change(Purchase, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post group_purchases_url(@group), params: { purchase: invalid_attributes }
        expect(response).to redirect_to(new_group_purchase_url(@group))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested purchase' do
      purchase = Purchase.create! valid_attributes
      expect do
        delete group_purchase_url(@group, purchase)
      end.to change(Purchase, :count).by(-1)
    end

    it 'redirects to the purchases list' do
      purchase = Purchase.create! valid_attributes
      delete group_purchase_url(@group, purchase)
      expect(response).to redirect_to(group_purchases_url(@group))
    end
  end
end
